---
title: "Simulation study - Variable selection for 'too' many zero-inflated predictors (ZIPSel)"
author:
  - name: "Mariella Gregorich"
    affiliation: "Medical University of Vienna, Center for Medical Data Science"
date: last-modified
categories: [2023, simulation study, ZIPSel, R]
description: "Classification: confidential"
editor: visual
theme: cosmo
toc: true  
number-sections: true
colorlinks: true
highlight-style: pygments
format:
  html: 
    code-fold: true
    code-tools: true
    html-math-method: katex
    self-contained: true
---


# Preliminaries

```{r setup, include=FALSE}
rm(list=ls())
knitr::opts_chunk$set(echo = F, warning=F, message=F)

source(here::here("src","functions_sim.R"))
source(here::here("src","functions_aux.R"))
#source(here::here("src","setup.R"))

pacman::p_load(ggplot2, parallel, future.apply, stringr, kableExtra,
               openxlsx, dplyr, tidyverse, simdata, looplot)

# Paths
out.path <- "output"
sim.date <- Sys.Date()
sim.file <- paste0("sim_", sim.date,"/")
sim.path <- here::here(out.path, sim.file)
ggcols <- c("black", "grey45", "deepskyblue3", "royalblue3", "seagreen4", "lightcoral", "goldenrod3")

# Read in results
tbl_res <- readRDS(here::here(sim.path, "tbl_scenario_results.rds"))

tbl_perf <- tbl_res$performance$tbl_perf  %>% 
  mutate(model = fct_relevel(model, c("oracle", "lasso", "ridge", "rlasso", "lridge", "rgarrote", "random forest")))
tbl_varsel <- tbl_res$performance$tbl_varsel %>% 
  mutate(model = fct_relevel(model, c("oracle", "lasso", "ridge", "rlasso", "lridge", "rgarrote", "random forest")))
tbl_groupsel <- tbl_res$performance$tbl_groupsel
```


# Performance
```{r}
tbl_perf %>%
  dplyr::select(n, p, epsstd, model, penalty, RMSE.est) %>%
  filter(penalty %in% c("combined", "-")) %>%
  arrange(model, penalty) %>%
  pivot_wider(id_cols = c(n, p, epsstd), values_from = RMSE.est, names_from = model) %>%
  nested_loop_plot(x = "n", steps = "epsstd", grid_cols ="p" ,
                   steps_y_base = 2.5, steps_y_height = 0.5,
                   steps_names = "Residual variance",
                   x_name = "Sample size", y_name = "Averaged RMSE",
                   spu_x_shift = 1.5,
                   grid_scales="free_y",
                   colors = ggcols,
                   steps_values_annotate = TRUE, steps_annotation_size = 3,
                   hline_intercept = 0,
                   y_expand_add = c(2, 0.25),
                   post_processing = list(
                       add_custom_theme = list(
                         text=element_text(size=14),
                           axis.text.x = element_text(size = 14,
                                                      angle = -90,
                                                      vjust = 0.5))
                   )) 
```

```{r}
tbl_perf %>%
  dplyr::select(n, p, epsstd, model, penalty, R2.est) %>%
  filter(penalty %in% c("combined", "-")) %>%
  arrange(model, penalty) %>%
  pivot_wider(id_cols = c(n, p, epsstd), values_from = R2.est, names_from = model) %>%
  nested_loop_plot(x = "n", steps = "epsstd", grid_cols ="p" ,
                   steps_y_base = 0, steps_y_height = 0.05,
                   steps_names = "Residual variance",
                   x_name = "Sample size", y_name = "Averaged R2",
                   spu_x_shift = 1.5,
                   grid_scales="free_y",
                   colors = ggcols,
                   steps_values_annotate = TRUE, steps_annotation_size = 3,
                   hline_intercept = 0,
                   y_expand_add = c(0.1, 0.25),
                   post_processing = list(
                       add_custom_theme = list(
                         text=element_text(size=14),
                           axis.text.x = element_text(size = 14,
                                                      angle = -90,
                                                      vjust = 0.5))
                   )) 
```

```{r}
tbl_perf %>%
  dplyr::select(n, p, epsstd, model, penalty, CS.est) %>%
  filter(penalty %in% c("combined", "-")) %>%
  arrange(model, penalty) %>%
  pivot_wider(id_cols = c(n, p, epsstd), values_from = CS.est, names_from = model) %>%
  nested_loop_plot(x = "n", steps = "epsstd", grid_cols ="p" ,
                   steps_y_base = 0, steps_y_height = 0.05,
                   steps_names = "Residual variance",
                   x_name = "Sample size", y_name = "Averaged CS",
                   spu_x_shift = 1.5,
                   grid_scales="free_y",
                   colors = ggcols,
                   steps_values_annotate = TRUE, steps_annotation_size = 3,
                   hline_intercept = 0,
                   y_expand_add = c(0.1, 0.25),
                   post_processing = list(
                       add_custom_theme = list(
                         text=element_text(size=14),
                           axis.text.x = element_text(size = 14,
                                                      angle = -90,
                                                      vjust = 0.5))
                   )) 
```


# Variable selection

# ```{r}
# tbl_varsel %>%
#   filter(epsstd == 3 & p==200) %>%
#   mutate(varname == to_numeric(str_remove_all(varname, "V")))
#   ggplot(aes(x=n, y=))
# ```


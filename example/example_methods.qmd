---
title: 'Example implementation of variable selection techniques for zero-inflated predictors'
author:
  - name: "Mariella Gregorich"
    affiliation: "Medical University of Vienna, Center for Medical Data Science"
date: last-modified
categories: [2023, ZIPSel, variable selection, R]
description: "Classification: confidential"
editor: visual
theme: cosmo
toc: true  
number-sections: true
colorlinks: true
highlight-style: pygments
format:
  html: 
    code-fold: true
    code-tools: true
    html-math-method: katex
    self-contained: true
---

```{r setup, include = FALSE}
rm(list = ls())

pacman::p_load(ggplot2, parallel, future.apply, stringr, 
               dplyr, tidyverse, tableone, concreg, gt,
               glmnet, patchwork, ranger, tuneRanger, RColorBrewer, ggvenn)

source(here::here("src","functions_aux.R"))

```

# Initial data analysis

## Mosaique cohort

```{r initialization}
# --- Initialization
ncv = 10
nR  = 2
#probnz = 0.9
data_mos <- readRDS(here::here("data", "mosaique", "Large_Mariella.rds"))
data_peptides <- data_mos[,7:ncol(data_mos)]
colnames(data_peptides) <- paste0("P",1:ncol(data_peptides))
rownames(data_peptides) <- paste0("N",1:nrow(data_peptides))
data_peptides <- apply(as.matrix(data_peptides), 2, as.numeric)
clin.vars <- c("Age", "Sex", "eGFR")

# Peptide subset selection due to computational feasibility based on max non-zero entries
ind <- which(apply(data_peptides, 2, assess_nonzeros, prop_nonzero = 0.90))
data_peptides <- as.matrix(data_peptides[,ind])
data_mos <- data.frame(cbind(data_mos[,1:6],data_peptides)) %>%
  dplyr::rename("Sex" = Gender)

# Parameter
n = nrow(data_mos)
p = ncol(data_peptides)
folds <- sample(rep(1:ncv, ceiling(n/ncv)))[1:n]
pflist <- list(c(1,2), c(2,1), c(1,3), c(3,1))


# Data preparation
data_mos$Sex <- to_factor(ifelse(data_mos$Sex == "female", 1, 0))
data_mos$Age <- as.numeric(data_mos$Age)
data_mos$eGFR <- as.numeric(data_mos$eGFR)
data_mos$log2eGFR <- log(data_mos$eGFR, 2)
marker.vars <- colnames(data_mos[,!colnames(data_mos) %in% c("fidAuswertung",clin.vars)])

# Data transformation
x <- data_peptides
colnames(x) <- paste0("x.", colnames(x))
d <- (data_peptides != 0)*1
colnames(d) <- paste0("d.", colnames(d))
utmp <- apply(data_peptides, 2, function(x) ifelse(x == 0, 0, log2(x)))
u <- apply(utmp, 2, function(x) ifelse(x == 0, mean(x[x > 0]), x))
colnames(u) <- paste0("u.", colnames(u))
global_min <- min(data_peptides[data_peptides > 0])
ximp <- apply(data_peptides, 2, function(x) log2(ifelse(x == 0, global_min*(1/2), x)))
c <- data.frame("age" = data_mos$Age, "sex" = data_mos$Sex)

# Data object for models
data.obj <- list("y" = data_mos$log2eGFR, "clinical" = c, x = ximp, u = u, d = d,
                 pred.ridge.cb = NA, pred.ridge.cp = NA,
                 pred.lasso = NA,
                 pred.lridge.cb = NA, pred.lridge.cp = NA,
                 pred.rgarrote.cb = NA, pred.rgarrote.cp = NA,
                 pred.rf.notune = NA, pred.rf.tune = NA)


```

```{r}
#| Label: tbl-table1
#| tbl-cap: "Study characteristics of the Mosaique cohort"
table_vars <- data.frame(print(CreateTableOne(vars=c("Age", "Sex", "eGFR"), data = data_mos), printToggle = F))
list.str <- strsplit(gsub("[()]", "", table_vars[which(str_detect(rownames(table_vars), "mean")),]), "\\s+")
table_vars[which(str_detect(rownames(table_vars), "mean")),] <- unlist(lapply(list.str, function(x) paste0(x[1], " \U00B1 ", x[2])))

table_vars %>%
  mutate(rnames=c("Sample size", "Age, years", "Sex, female (%)", "eGFR, 1.73m2/min/l")) %>%
  relocate(rnames, .before=Overall) %>%
  add_row(rnames="Peptides", Overall=as.character(p), .before=2) %>%
  `colnames<-`(c("Variable", "Statistics")) %>% gt()
```

```{r}
p1 <- data_mos %>% 
  dplyr::select(-c(idAuswertung, Age, Sex, eGFR)) %>% 
  summarise_all(~sum(.x == 0) / n()) %>% 
  reshape2::melt() %>%
  arrange(value) %>%
  mutate("P" = 1:n()) %>%
  ggplot(aes(x = P, y = value)) +
  geom_line() +
  ggtitle("Data from Mosaiques Diagnostics") +
  scale_x_continuous("Index of variable") +
  scale_y_continuous("Proportion of zero-inflation") +
  theme_classic()+
  theme(plot.title = element_text(hjust = 0.5))


q <- 400                      # number of proteomics 
prop.zero <-runif(q,0,0.85)   # proportion nonzero for each peptide
prop.zero <- sort(prop.zero)
data_sim <- data.frame(P = 1:q, value = prop.zero)

p2 <- ggplot(data_sim, aes(x = P, y = value)) +
  geom_line() +
  ggtitle("Simulated data") +
  scale_x_continuous("Index of variable") +
  scale_y_continuous("Proportion of zero-inflation") +
  theme_classic()+
  theme(plot.title = element_text(hjust = 0.5))

p_together <- p1 + p2 + plot_annotation(tag_levels = 'A')
ggsave(file = here::here("output","fig_dist_zi.tiff"), plot = p_together,
       width = 2.25*100, height = 1*100, units = "mm", dpi = 350, compression = "lzw")
```

## Example of data transformations

```{r}
#| label: fig-example
#| fig-cap: "Example of a single peptide from the MOsaique dataset displaying the effects of the data transformation and the data split into the continous U and the binary component D. Original data is the only panel without the log2-transformation."
p1 <- data.frame("intensity" = x[, 10]) %>% ggplot(aes(x = intensity)) + geom_histogram(col = "black", fill = "grey89", bins = 30) + 
  theme_light() + ggtitle("Original data X")
p2 <- data.frame("intensity" = ximp[, 10]) %>% ggplot(aes(x = intensity)) + geom_histogram(col = "black", fill = "grey89", bins = 30) + 
  theme_light() + ggtitle("Transformed data X")
p3 <- data.frame("intensity" = u[, 10]) %>% ggplot(aes(x = intensity)) + geom_histogram(col = "black", fill = "grey89", bins = 30) + 
  theme_light() + ggtitle("Continuous component U")
p4 <- data.frame("intensity" = to_factor(d[, 10])) %>% ggplot(aes(x = intensity)) + geom_bar(col = "black", fill = "grey89") + 
  theme_light()+ ggtitle("Binary component D")

(p1 + p2 ) / ( p3 + p4 ) + plot_annotation(tag_levels = list(c('(A)', '(B)', '(C1)', '(C2)')))
```

# Methods

## Models

### Algorithmic models

```{r}
# CV Predictions
model <- rep(c("lasso", "ridge", "lasso-ridge", "ridge-lasso", "ridge-garrote", "random forest"), each=2)[-2]
penalty <- c(rep(c("combined", "component"), 5)[-2], "without tuning", "tuning")
nmod <- length(model)
tbl_performance <- cbind.data.frame(model, penalty, matrix(NA, nrow=ncv*nmod, ncol=4))
colnames(tbl_performance) <- c("model", "penalty", "R2", "RMSPE", "MAE", "CS")
for(i in 1:ncv){
  print(paste0("NCV iteration = ", i,"/", ncv))
  obj.train <- list("y" = data.obj$y[(1:n)[folds != i]],
                    "clinical" = data.obj$clinical[(1:n)[folds != i], ], 
                    "x" = data.obj$x[(1:n)[folds != i], ], 
                    "u" = data.obj$u[(1:n)[folds != i], ],
                    "d" = data.obj$d[(1:n)[folds != i], ])
  obj.test <- list("y" = data.obj$y[(1:n)[folds == i]],
                   "clinical" = data.obj$clinical[(1:n)[folds == i],], 
                   "x" = data.obj$x[(1:n)[folds == i], ],
                   "u" = data.obj$u[(1:n)[folds == i], ], 
                   "d" = data.obj$d[(1:n)[folds == i], ])
  
  # Models
  fit.lasso.cb <- perform_penreg(obj.train, family = "gaussian", alpha1 = 1, cv = ncv, R = nR, penalty = "combined")
  fit.ridge.cb <- perform_penreg(obj.train, family="gaussian", alpha1 = 0, cv=ncv, R=nR, penalty = "combined")
  fit.ridge.cp <- perform_penreg(obj.train, family = "gaussian", alpha1 = 0, cv = ncv, R = nR, penalty  =  "component", pflist = pflist)
  fit.lridge.cb <- perform_lridge(obj.train, family = "gaussian", cv = ncv, R = nR, penalty = "combined")
  fit.lridge.cp <- perform_lridge(obj.train, family = "gaussian", cv = ncv, R = nR, penalty = "component", pflist = pflist)
  fit.rlasso.cb <- perform_rlasso(obj.train, family = "gaussian", cv = ncv, R = nR, penalty = "combined")
  fit.rlasso.cp <- perform_rlasso(obj.train, family = "gaussian", cv = ncv, R = nR, penalty = "component", pflist = pflist)
  fit.rgarrote.cb <- perform_rgarrote(obj.train, family = "gaussian", cv = ncv, R = nR, penalty = "combined")
  fit.rgarrote.cp <- perform_rgarrote(obj.train, family = "gaussian", cv = ncv, R = nR, penalty = "component", pflist = pflist)
  
  # Predictions
  data.obj$pred.lasso.cb[(1:n)[folds == i]] <- predict_penreg(obj = fit.lasso.cb, newdata = obj.test, model = "lasso")
  data.obj$pred.ridge.cb[(1:n)[folds == i]] <- predict_penreg(obj = fit.ridge.cb,newdata = obj.test,model = "ridge")
  data.obj$pred.ridge.cp[(1:n)[folds == i]] <- predict_penreg(obj = fit.ridge.cp, newdata = obj.test, model = "ridge")
  data.obj$pred.lridge.cb[(1:n)[folds == i]] <- predict_lridge(obj = fit.lridge.cb, newdata = obj.test)
  data.obj$pred.lridge.cp[(1:n)[folds == i]] <- predict_lridge(obj = fit.lridge.cp, newdata = obj.test)
  data.obj$pred.rlasso.cb[(1:n)[folds == i]] <- predict_rlasso(obj = fit.rlasso.cb, newdata = obj.test)
  data.obj$pred.rlasso.cp[(1:n)[folds == i]] <- predict_rlasso(obj = fit.rlasso.cp, newdata = obj.test)
  data.obj$pred.rgarrote.cb[(1:n)[folds == i]] <- predict_rgarrote(obj = fit.rgarrote.cb, newdata = obj.test)
  data.obj$pred.rgarrote.cp[(1:n)[folds == i]] <- predict_rgarrote(obj = fit.rgarrote.cp, newdata = obj.test)
  
  # Performance
  tbl_performance[nmod*i-nmod+1, 3:6] <- eval_performance(data.obj$pred.lasso.cb[(1:n)[folds == i]], obj.test$y)
  tbl_performance[nmod*i-nmod+2, 3:6] <- eval_performance(data.obj$pred.ridge.cb[(1:n)[folds == i]], obj.test$y)
  tbl_performance[nmod*i-nmod+3, 3:6] <- eval_performance(data.obj$pred.ridge.cp[(1:n)[folds == i]], obj.test$y)
  tbl_performance[nmod*i-nmod+4, 3:6] <- eval_performance(data.obj$pred.ridge.cb[(1:n)[folds == i]], obj.test$y)
  tbl_performance[nmod*i-nmod+5, 3:6] <- eval_performance(data.obj$pred.lridge.cp[(1:n)[folds == i]], obj.test$y)
  tbl_performance[nmod*i-nmod+6, 3:6] <- eval_performance(data.obj$pred.rlasso.cb[(1:n)[folds == i]], obj.test$y)
  tbl_performance[nmod*i-nmod+7, 3:6] <- eval_performance(data.obj$pred.rlasso.cp[(1:n)[folds == i]], obj.test$y)
  tbl_performance[nmod*i-nmod+8, 3:6] <- eval_performance(data.obj$pred.rgarrote.cb[(1:n)[folds == i]], obj.test$y)
  tbl_performance[nmod*i-nmod+9, 3:6] <- eval_performance(data.obj$pred.rgarrote.cp[(1:n)[folds == i]], obj.test$y)
}


# Final model
list_model <- list()
list_model$fit.lasso <- perform_penreg(data.obj = data.obj, family = "gaussian", cv = ncv, R = nR, alpha1 = 1, penalty = "combined")
list_model$fit.ridge.cb <- perform_penreg(data.obj = data.obj, family = "gaussian", cv = ncv, R = nR, penalty = "combined")
list_model$fit.ridge.cp <- perform_penreg(data.obj = data.obj, family = "gaussian", cv = ncv, R = nR, penalty = "component", pflist = pflist)
list_model$fit.lridge.cb <- perform_lridge(data.obj = data.obj, family = "gaussian", cv = ncv, R = nR, penalty = "combined")
list_model$fit.lridge.cp <- perform_lridge(data.obj = data.obj, family = "gaussian", cv = ncv, R = nR, penalty = "component", pflist = pflist)
list_model$fit.rlasso.cb <- perform_rlasso(data.obj = data.obj, family = "gaussian", cv = ncv, R = nR, penalty = "combined")
list_model$fit.rlasso.cp <- perform_rlasso(data.obj = data.obj, family = "gaussian", cv = ncv, R = nR, penalty = "component", pflist = pflist)
list_model$fit.rgarrote.cb <- perform_rlasso(data.obj = data.obj, family = "gaussian", cv = ncv, R = nR, penalty = "combined")
list_model$fit.rgarrote.cp <- perform_rlasso(data.obj = data.obj, family = "gaussian", cv = ncv, R = nR, penalty = "component", pflist = pflist)

# Coefficients
list_coef <- list()
list_coef$lasso.cb <- list_model$fit.lasso$fit$coefficients
list_coef$ridge.cb <- list_model$fit.ridge.cb$fit$coefficients
list_coef$ridge.cp <- list_model$fit.ridge.cp$fit$coefficients
list_coef$lridge.cb <- list_model$fit.lridge.cb$fit$coefficients
list_coef$lridge.cp <- list_model$fit.lridge.cp$fit$coefficients
list_coef$rlasso.cb <- list_model$fit.rlasso.cb$fit$coefficients
list_coef$rlasso.cp <- list_model$fit.rlasso.cp$fit$coefficients
list_coef$rgarrote.cb <- list_model$fit.rgarrote.cb$fit$coefficients
list_coef$rgarrote.cp <- list_model$fit.rgarrote.cp$fit$coefficients

# Variable selection
extract_varsel <- function(modelcoef){
  model.varsel <- rownames(modelcoef)[which(modelcoef != 0)][-1]
  model.varsel <- str_remove_all(model.varsel, "u.|d.|x.")
  return(model.varsel[!duplicated(model.varsel)])
}

# List of variable selection for models 
list_varsel <- list()
list_varsel$all <- colnames(data_peptides)
list_varsel$lasso.cb <- extract_varsel(list_coef$lasso.cb)
list_varsel$ridge.cb <- extract_varsel(list_coef$ridge.cb)
list_varsel$ridge.cp <- extract_varsel(list_coef$ridge.cp)
list_varsel$lridge.cb <- extract_varsel(list_coef$lridge.cb)
list_varsel$lridge.cp <- extract_varsel(list_coef$lridge.cp)
list_varsel$rlasso.cb <- extract_varsel(list_coef$rlasso.cb)
list_varsel$rlasso.cp <- extract_varsel(list_coef$rlasso.cp)
list_varsel$rgarrote.cb <- extract_varsel(list_coef$rgarrote.cb)
list_varsel$rgarrote.cp <- extract_varsel(list_coef$rgarrote.cp)
```

### Random forest

```{r}
#| output: false

dataset <- data.frame(y = log2(data_mos$eGFR), age = data_mos$Age, sex = data_mos$Sex, x, pred.rf.notune = NA, pred.rf.tune = NA)

for(i in 1:ncv){
  train <- dataset[(1:n)[folds != i], ]
  test <- dataset[(1:n)[folds == i], ]
  
  fit.rf.notune <- ranger(y~., data = train %>% dplyr::select(-c(pred.rf.notune, pred.rf.tune)), num.trees = 1000)
  fit.rf.tune <- tuneMtryFast(y~., data = train %>% dplyr::select(-c(pred.rf.notune, pred.rf.tune)), num.trees = 1000, stepFactor = 0.5, doBest = TRUE, plot = FALSE)
  
  # Predictions
   dataset$pred.rf.notune[(1:n)[folds == i]] <- predict(fit.rf.notune,  data = test %>% dplyr::select(-c(y, pred.rf.notune, pred.rf.tune)))$predictions
   dataset$pred.rf.tune[(1:n)[folds == i]] <- predict(fit.rf.tune,  data = test %>% dplyr::select(-c(y, pred.rf.tune, pred.rf.notune)))$predictions
   
  # Performance 
  tbl_performance[nmod*i-nmod+10, 3:6] <- eval_performance(pred = dataset$pred.rf.notune, obs = dataset$y)
  tbl_performance[nmod*i-nmod+11, 3:6] <- eval_performance(pred = dataset$pred.rf.tune, obs = dataset$y)
}
```

```{r}
# Final performance of all models
tbl_perf <- tbl_performance %>%
  group_by(model, penalty) %>%
  summarise("R2"=mean(R2, na.rm=TRUE), "RMSPE"=mean(RMSPE, na.rm=TRUE), 
            "MAE"=mean(MAE, na.rm=TRUE), "CS"=mean(CS, na.rm=TRUE))
```

## Coefficients

```{r}
#| label: fig-lassocoef 
#| fig-cap: "Coefficients of the lasso regression model ordered by the magnitude." 
tbl.coef.lasso <- data.frame("peptide" = str_remove_all(names(list_coef$lasso.cb)[2:(p+1)], "x."), "coef" = list_coef$lasso.cb[2:(p+1)]) 

p1 <- tbl.coef.lasso %>%
  arrange(coef) %>%
  mutate(coefid = 1:p) %>%
  ggplot(aes(x = coef, y = coefid)) +
  geom_point(shape = 1, col = "royalblue3") +
  scale_x_continuous("Coefficient") +
  scale_y_continuous("Variable index") +
  geom_line(orientation = "y",col = "royalblue3") +
  geom_vline(xintercept = 0, linetype = 2) +
  ggtitle("Ordered by X") +
  theme_bw() +
  theme(plot.title = element_text(hjust = 0.5))
p2 <- tbl.coef.lasso %>%
  arrange(peptide) %>%
  mutate(coefid = 1:p) %>%
  ggplot(aes(x = coef, y = coefid)) +
  geom_point(shape = 1, col = "royalblue3") +
  scale_x_continuous("Coefficient") +
  scale_y_continuous("Variable index") +
  geom_line(orientation = "y",col = "royalblue3") +
  geom_vline(xintercept = 0, linetype = 2) +
  ggtitle("Unordered") +
  theme_bw() +
  theme(plot.title = element_text(hjust = 0.5))
p1 + p2
```

```{r}
#| label: fig-ridgecoefcb 
#| fig-cap: "Component-specific coefficients of the ridge regression model ordered by D and U, respectively." 

tbl.coef.ridge.cb <- data.frame("peptide"=str_remove_all(names(list_coef$ridge.cb)[2:(p+1)], "u.|d."), 
                                "U"=list_coef$ridge.cb[2:(p+1)], "D"=list_coef$ridge.cb[(p+2):(2*p+1)]) 

p1 <- tbl.coef.ridge.cb %>%
  arrange(D) %>%
  mutate(coefid = 1:p) %>%
  pivot_longer(cols = c(U, D), names_to = "component", values_to = "coef") %>%
  ggplot(aes(x = coef, y = coefid, group = component, col = component)) +
  geom_point(shape = 1) +
  scale_x_continuous("Coefficient") +
  scale_y_continuous("Variable index") +
  geom_line(orientation = "y") +
  geom_vline(xintercept = 0, linetype = 2) +
  scale_color_manual("Component", values = c("grey20", "red3")) +
  ggtitle("Ordered by D") +
  theme_bw() +
  theme(plot.title = element_text(hjust = 0.5), legend.position = "None")
p2 <- tbl.coef.ridge.cb %>%
  arrange(U) %>%
  mutate(coefid = 1:p) %>%
  pivot_longer(cols = c(U, D), names_to = "component", values_to = "coef") %>%
  ggplot(aes(x = coef, y = coefid, group = component, col = component)) +
  geom_point(shape = 1) +
  scale_x_continuous("Coefficient") +
  scale_y_continuous("Variable index") +
  geom_line(orientation = "y") +
  geom_vline(xintercept = 0, linetype = 2) +
  scale_color_manual("Component", values = c("grey20", "red3")) +
  ggtitle("Ordered by U") +
  theme_bw() +
  theme(plot.title = element_text(hjust = 0.5), legend.position = "None")
p3 <- tbl.coef.ridge.cb %>%
  arrange(peptide) %>%
  mutate(coefid = 1:p) %>%
  pivot_longer(cols = c(U, D), names_to = "component", values_to = "coef") %>%
  ggplot(aes(x = coef, y = coefid, group = component, col = component)) +
  geom_point(shape = 1) +
  scale_x_continuous("Coefficient") +
  scale_y_continuous("Variable index") +
  geom_line(orientation = "y") +
  geom_vline(xintercept = 0, linetype = 2) +
  scale_color_manual("Component", values = c("grey20", "red3")) +
  ggtitle("Unordered") +
  theme_bw() +
  theme(plot.title = element_text(hjust = 0.5))
p1 + p2 + p3
```

```{r}
#| label: fig-ridgecoefcp
#| fig-cap: "Component-specific coefficients of the ridge regression model ordered by D and U, respectively." 
tbl.coef.ridge.cp <- data.frame("peptide" = str_remove_all(names(list_coef$ridge.cp)[2:(p+1)], "u.|d."), 
                                "U" = list_coef$ridge.cp[2:(p+1)], "D" = list_coef$ridge.cp[(p+2):(2*p+1)]) 

p1 <- tbl.coef.ridge.cp %>%
  arrange(D) %>%
  mutate(coefid = 1:p) %>%
  pivot_longer(cols = c(U, D), names_to = "component", values_to = "coef") %>%
  ggplot(aes(x = coef, y = coefid, group = component, col = component)) +
  geom_point(shape = 1) +
  scale_x_continuous("Coefficient") +
  scale_y_continuous("Variable index") +
  geom_line(orientation = "y") +
  geom_vline(xintercept = 0, linetype = 2) +
  scale_color_manual("Component", values = c("grey20", "red3")) +
  ggtitle("Ordered by D") +
  theme_bw() +
  theme(plot.title = element_text(hjust = 0.5), legend.position = "None")
p2 <- tbl.coef.ridge.cp %>%
  arrange(U) %>%
  mutate(coefid = 1:p) %>%
  pivot_longer(cols = c(U, D), names_to = "component", values_to = "coef") %>%
  ggplot(aes(x = coef, y = coefid, group = component, col = component)) +
  geom_point(shape = 1) +
  scale_x_continuous("Coefficient") +
  scale_y_continuous("Variable index") +
  geom_line(orientation = "y") +
  geom_vline(xintercept = 0, linetype = 2) +
  scale_color_manual("Component", values = c("grey20", "red3")) +
  ggtitle("Ordered by U") +
  theme_bw() +
  theme(plot.title = element_text(hjust = 0.5), legend.position = "None")
p3 <- tbl.coef.ridge.cp %>%
  arrange(peptide) %>%
  mutate(coefid = 1:p) %>%
  pivot_longer(cols = c(U, D), names_to = "component", values_to = "coef") %>%
  ggplot(aes(x = coef, y = coefid, group = component, col = component)) +
  geom_point(shape = 1) +
  scale_x_continuous("Coefficient") +
  scale_y_continuous("Variable index") +
  geom_line(orientation = "y") +
  geom_vline(xintercept = 0, linetype = 2) +
  scale_color_manual("Component", values = c("grey20", "red3")) +
  ggtitle("Unordered") +
  theme_bw() +
  theme(plot.title = element_text(hjust = 0.5))
p1 + p2 + p3
```

```{r}
#| label: fig-lridgecoefcb 
#| fig-cap: "Component-specific coefficients of the lasso-ridge regression model ordered by the magnitude of the coefficients corresponding to D and U, respectively." 

tbl.coef.lridge.cb <- data.frame("peptide" = str_remove_all(names(list_coef$lridge.cb)[2:(p+1)], "u.|d."), 
                                 "U" = list_coef$lridge.cb[2:(p+1)], "D" = list_coef$lridge.cb[(p+2):(2*p+1)]) 

p1 <- tbl.coef.lridge.cb %>%
  arrange(D) %>%
  mutate(coefid = 1:p) %>%
  pivot_longer(cols = c(U, D), names_to = "component", values_to = "coef") %>%
  ggplot(aes(x = coef, y = coefid, group = component, col = component)) +
  geom_point(shape = 1) +
  scale_x_continuous("Coefficient") +
  scale_y_continuous("Variable index") +
  geom_line(orientation = "y") +
  geom_vline(xintercept = 0, linetype = 2) +
  scale_color_manual("Component", values = c("grey20", "red3")) +
  ggtitle("Ordered by D") +
  theme_bw() +
  theme(plot.title = element_text(hjust = 0.5), legend.position = "None")
p2 <- tbl.coef.lridge.cb %>%
  arrange(U) %>%
  mutate(coefid = 1:p) %>%
  pivot_longer(cols = c(U, D), names_to = "component", values_to = "coef") %>%
  ggplot(aes(x = coef, y = coefid, group = component, col = component)) +
  geom_point(shape = 1) +
  scale_x_continuous("Coefficient") +
  scale_y_continuous("Variable index") +
  geom_line(orientation = "y") +
  geom_vline(xintercept = 0, linetype = 2) +
  scale_color_manual("Component", values = c("grey20", "red3")) +
  ggtitle("Ordered by U") +
  theme_bw() +
  theme(plot.title = element_text(hjust = 0.5), legend.position = "None")
p3 <- tbl.coef.lridge.cb %>%
  arrange(peptide) %>%
  mutate(coefid = 1:p) %>%
  pivot_longer(cols = c(U, D), names_to = "component", values_to = "coef") %>%
  ggplot(aes(x = coef, y = coefid, group = component, col = component)) +
  geom_point(shape = 1) +
  scale_x_continuous("Coefficient") +
  scale_y_continuous("Variable index") +
  geom_line(orientation = "y") +
  geom_vline(xintercept = 0, linetype = 2) +
  scale_color_manual("Component", values = c("grey20", "red3")) +
  ggtitle("Unordered") +
  theme_bw() +
  theme(plot.title = element_text(hjust = 0.5))
p1 + p2 + p3
```

```{r}
#| label: fig-lridgecoefcp 
#| fig-cap: "Component-specific coefficients of the lasso-ridge regression model ordered by the magnitude of the coefficients corresponding to D and U, respectively." 

tbl.coef.lridge.cp <- data.frame("peptide" = str_remove_all(names(list_coef$lridge.cb)[2:(p+1)], "u.|d."), 
                                 "U" = list_coef$lridge.cp[2:(p+1)], "D" = list_coef$lridge.cp[(p+2):(2*p+1)]) 

p1 <- tbl.coef.lridge.cp %>%
  arrange(D) %>%
  mutate(coefid = 1:p) %>%
  pivot_longer(cols = c(U, D), names_to = "component", values_to = "coef") %>%
  ggplot(aes(x = coef, y = coefid, group = component, col = component)) +
  geom_point(shape = 1) +
  scale_x_continuous("Coefficient") +
  scale_y_continuous("Variable index") +
  geom_line(orientation = "y") +
  geom_vline(xintercept = 0, linetype = 2) +
  scale_color_manual("Component", values = c("grey20", "red3")) +
  ggtitle("Ordered by D") +
  theme_bw() +
  theme(plot.title = element_text(hjust = 0.5), legend.position = "None")
p2 <- tbl.coef.lridge.cp %>%
  arrange(U) %>%
  mutate(coefid = 1:p) %>%
  pivot_longer(cols = c(U, D), names_to = "component", values_to = "coef") %>%
  ggplot(aes(x = coef, y = coefid, group = component, col = component)) +
  geom_point(shape = 1) +
  scale_x_continuous("Coefficient") +
  scale_y_continuous("Variable index") +
  geom_line(orientation = "y") +
  geom_vline(xintercept = 0, linetype=2) +
  scale_color_manual("Component", values = c("grey20", "red3")) +
  ggtitle("Ordered by U") +
  theme_bw() +
  theme(plot.title = element_text(hjust = 0.5), legend.position = "None")
p3 <- tbl.coef.lridge.cp %>%
  arrange(peptide) %>%
  mutate(coefid = 1:p) %>%
  pivot_longer(cols = c(U, D), names_to = "component", values_to = "coef") %>%
  ggplot(aes(x = coef, y = coefid, group = component, col = component)) +
  geom_point(shape = 1) +
  scale_x_continuous("Coefficient") +
  scale_y_continuous("Variable index") +
  geom_line(orientation = "y") +
  geom_vline(xintercept = 0, linetype = 2) +
  scale_color_manual("Component", values = c("grey20", "red3")) +
  ggtitle("Unordered") +
  theme_bw() +
  theme(plot.title = element_text(hjust = 0.5))
p1 + p2 + p3
```

```{r}
#| label: fig-rlassocoefcb 
#| fig-cap: "Coefficients of the ridge-lasso regression model ordered by the magnitude." 
tbl.coef.rlasso.cb <- data.frame("peptide" = str_remove_all(names(list_coef$rlasso.cb)[2:(p+1)], "x."), 
                                 "coef" = list_coef$rlasso.cb[2:(p+1)]) 

p1 <- tbl.coef.rlasso.cb %>%
  arrange(coef) %>%
  mutate(coefid = 1:p) %>%
  ggplot(aes(x = coef, y = coefid)) +
  geom_point(shape = 1,col = "royalblue3") +
  scale_x_continuous("Coefficient") +
  scale_y_continuous("Variable index") +
  geom_line(orientation = "y",col = "royalblue3") +
  geom_vline(xintercept = 0, linetype = 2) +
  ggtitle("Ordered by U") +
  theme_bw() +
  theme(plot.title = element_text(hjust = 0.5))
p2 <- tbl.coef.rlasso.cb %>%
  arrange(peptide) %>%
  mutate(coefid = 1:p) %>%
  ggplot(aes(x = coef, y = coefid)) +
  geom_point(shape = 1,col = "royalblue3") +
  scale_x_continuous("Coefficient") +
  scale_y_continuous("Variable index") +
  geom_line(orientation = "y",col = "royalblue3") +
  geom_vline(xintercept = 0, linetype = 2) +
  ggtitle("Unordered") +
  theme_bw() +
  theme(plot.title = element_text(hjust = 0.5))
p1 + p2
```

```{r}
#| label: fig-rlassocoefcp 
#| fig-cap: "Coefficients of the ridge-lasso regression model ordered by the magnitude." 
tbl.coef.rlasso.cp <- data.frame("peptide" = str_remove_all(names(list_coef$rlasso.cp)[2:(p+1)], "x."), 
                                 "coef" = list_coef$rlasso.cp[2:(p+1)]) 

p1 <- tbl.coef.rlasso.cp %>%
  arrange(coef) %>%
  mutate(coefid = 1:p) %>%
  ggplot(aes(x = coef, y = coefid)) +
  geom_point(shape = 1, col = "royalblue3") +
  scale_x_continuous("Coefficient") +
  scale_y_continuous("Variable index") +
  geom_line(orientation = "y",col = "royalblue3") +
  geom_vline(xintercept = 0, linetype = 2) +
  ggtitle("Ordered by U") +
  theme_bw() +
  theme(plot.title = element_text(hjust = 0.5))
p2 <- tbl.coef.rlasso.cp %>%
  arrange(peptide) %>%
  mutate(coefid = 1:p) %>%
  ggplot(aes(x = coef, y = coefid)) +
  geom_point(shape = 1, col = "royalblue3") +
  scale_x_continuous("Coefficient") +
  scale_y_continuous("Variable index") +
  geom_line(orientation = "y", col = "royalblue3") +
  geom_vline(xintercept = 0, linetype=2) +
  ggtitle("Unordered") +
  theme_bw() +
  theme(plot.title = element_text(hjust = 0.5))
p1 + p2
```

```{r}
#| label: fig-rgarrotecoefcb 
#| fig-cap: "Component-specific coefficients of the ridge-garrote regression model ordered by D and U, respectively." 
tbl.coef.rgarrote.cb <- data.frame("peptide" = str_remove_all(names(list_coef$rgarrote.cb)[2:(p+1)], "u.|d."), 
                                   "U" = list_coef$rgarrote.cb[2:(p+1)], "D" = list_coef$rgarrote.cb[(p+2):(2*p+1)]) 

p1 <- tbl.coef.rgarrote.cb %>%
  arrange(D) %>%
  mutate(coefid = 1:p) %>%
  pivot_longer(cols = c(U, D), names_to = "component", values_to = "coef") %>%
  ggplot(aes(x = coef, y = coefid, group = component, col = component)) +
  geom_point(shape = 1) +
  scale_x_continuous("Coefficient") +
  scale_y_continuous("Variable index") +
  geom_line(orientation = "y") +
  geom_vline(xintercept = 0, linetype = 2) +
  scale_color_manual("Component", values = c("grey20", "red3")) +
  ggtitle("Ordered by D") +
  theme_bw() +
  theme(plot.title = element_text(hjust = 0.5))
p2 <- tbl.coef.rgarrote.cb %>%
  arrange(U) %>%
  mutate(coefid = 1:p) %>%
  pivot_longer(cols = c(U, D), names_to = "component", values_to = "coef") %>%
  ggplot(aes(x = coef, y = coefid, group = component, col = component)) +
  geom_point(shape = 1) +
  scale_x_continuous("Coefficient") +
  scale_y_continuous("Variable index") +
  geom_line(orientation = "y") +
  geom_vline(xintercept = 0, linetype = 2) +
  scale_color_manual("Component", values = c("grey20", "red3")) +
  ggtitle("Ordered by U") +
  theme_bw() +
  theme(plot.title = element_text(hjust = 0.5))
p3 <- tbl.coef.rgarrote.cb %>%
  arrange(peptide) %>%
  mutate(coefid = 1:p) %>%
  pivot_longer(cols = c(U, D), names_to = "component", values_to = "coef") %>%
  ggplot(aes(x = coef, y = coefid, group = component, col = component)) +
  geom_point(shape = 1) +
  scale_x_continuous("Coefficient") +
  scale_y_continuous("Variable index") +
  geom_line(orientation = "y") +
  geom_vline(xintercept = 0, linetype = 2) +
  scale_color_manual("Component", values = c("grey20", "red3")) +
  ggtitle("Unordered") +
  theme_bw() +
  theme(plot.title = element_text(hjust = 0.5))
(p1 + p2 + p3) +
  plot_layout(guides = "collect") & theme(legend.position = 'bottom')
```

```{r}
#| label: fig-rgarrotecoefcp 
#| fig-cap: "Component-specific coefficients of the ridge-garrote regression model ordered by D and U, respectively." 
tbl.coef.rgarrote.cp <- data.frame("peptide" = str_remove_all(names(list_coef$rgarrote.cp)[2:(p+1)], "u.|d."), 
                                   "U" = list_coef$rgarrote.cp[2:(p+1)], "D" = list_coef$rgarrote.cp[(p+2):(2*p+1)]) 

p1 <- tbl.coef.rgarrote.cp %>%
  arrange(D) %>%
  mutate(coefid = 1:p) %>%
  pivot_longer(cols = c(U, D), names_to = "component", values_to = "coef") %>%
  ggplot(aes(x = coef, y = coefid, group = component, col = component)) +
  geom_point(shape = 1) +
  scale_x_continuous("Coefficient") +
  scale_y_continuous("Variable index") +
  geom_line(orientation = "y") +
  geom_vline(xintercept = 0, linetype = 2) +
  scale_color_manual("Component", values = c("grey20", "red3")) +
  ggtitle("Ordered by D") +
  theme_bw() +
  theme(plot.title = element_text(hjust = 0.5))
p2 <- tbl.coef.rgarrote.cp %>%
  arrange(U) %>%
  mutate(coefid = 1:p) %>%
  pivot_longer(cols = c(U, D), names_to = "component", values_to = "coef") %>%
  ggplot(aes(x = coef, y = coefid, group = component, col = component)) +
  geom_point(shape = 1) +
  scale_x_continuous("Coefficient") +
  scale_y_continuous("Variable index") +
  geom_line(orientation = "y") +
  geom_vline(xintercept = 0, linetype = 2) +
  scale_color_manual("Component", values = c("grey20", "red3")) +
  ggtitle("Ordered by U") +
  theme_bw() +
  theme(plot.title = element_text(hjust = 0.5))
p3 <- tbl.coef.rgarrote.cp %>%
  arrange(peptide) %>%
  mutate(coefid = 1:p) %>%
  pivot_longer(cols = c(U, D), names_to = "component", values_to = "coef") %>%
  ggplot(aes(x = coef, y = coefid, group = component, col = component)) +
  geom_point(shape = 1) +
  scale_x_continuous("Coefficient") +
  scale_y_continuous("Variable index") +
  geom_line(orientation = "y") +
  geom_vline(xintercept = 0, linetype = 2) +
  scale_color_manual("Component", values = c("grey20", "red3")) +
  ggtitle("Unordered") +
  theme_bw() +
  theme(plot.title = element_text(hjust = 0.5))
(p1 + p2 + p3) +
  plot_layout(guides = "collect") & theme(legend.position = 'bottom')
```

# Results

## Performance measures

```{r}
#| label: tbl-results
#| tbl-cap: "Results of all models"
tbl_perf %>%
  data.frame() %>%
  mutate_at(3:6, round, digits = 3) %>%
  gt()

list_results <- list("performance" = tbl_perf, 
                     "performance_ncv"=tbl_performance, 
                     "coef"=list_coef,
                     "models"=list_model,
                     "varsel"=list_varsel)
filename <- paste0("results_mosaique_pnz", propnz, "_nR", nR,"_ncv", ncv,".rds")
saveRDS(list_results, here::here("output", "example", filename))
```

<br>

## Variable selection

## Calibration

::: panel-tabset
### Ridge

```{r}
pcal_ridge_cb <- plot_calibration(pred = data.obj$pred.ridge.cb, obs = data_mos$log2eGFR, fig.title = "penalty: combined")
pcal_ridge_cp <- plot_calibration(pred = data.obj$pred.ridge.cp, obs = data_mos$log2eGFR, fig.title = "penalty: component")
pcal_ridge_cb + pcal_ridge_cp
```

### Lasso

```{r}
pcal_lasso <- plot_calibration(pred = data.obj$pred.lasso, obs = data_mos$log2eGFR, fig.title = "penalty: combined")
pcal_lasso
```

### Lasso-ridge

```{r}
pcal_lridge_cb <- plot_calibration(pred = data.obj$pred.lridge.cb, obs = data.obj$y, fig.title = "penalty: combined")
pcal_lridge_cp <- plot_calibration(pred = data.obj$pred.lridge.cp, obs = data.obj$y, fig.title = "penalty: component")
pcal_lridge_cb + pcal_lridge_cp
```

### Ridge-lasso

```{r}
pcal_rlasso_cb <- plot_calibration(pred = data.obj$pred.rlasso.cb, obs = data.obj$y, fig.title = "penalty: combined")
pcal_rlasso_cp <- plot_calibration(pred = data.obj$pred.rlasso.cp, obs = data.obj$y, fig.title = "penalty: component")
pcal_rlasso_cb + pcal_rlasso_cp 
```

### Ridge-garrote

```{r}
pcal_rgarrote_cb <- plot_calibration(pred = data.obj$pred.rgarrote.cb, obs = data.obj$y, fig.title = "penalty: combined")
pcal_rgarrote_cp <- plot_calibration(pred = data.obj$pred.rgarrote.cp, obs = data.obj$y, fig.title = "penalty: component")
pcal_rgarrote_cb + pcal_rgarrote_cp 
```

### Random forest

```{r}
pcal_rf_notune <- plot_calibration(pred = dataset$pred.rf.notune, obs = dataset$y, fig.title = "no tuning")
pcal_rf_tune <- plot_calibration(pred = dataset$pred.rf.tune, obs = dataset$y, fig.title = "with tuning")
pcal_rf_notune + pcal_rf_tune
```
:::

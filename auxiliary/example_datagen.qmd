---
title: 'Example of data generation'
author:
  - name: "Mariella Gregorich"
    affiliation: "Medical University of Vienna, Center for Medical Data Science"
date: last-modified
categories: [2023, ZIPSel, variable selection, R]
description: "Classification: confidential"
editor: visual
theme: cosmo
toc: true  
number-sections: true
colorlinks: true
highlight-style: pygments
format:
  html: 
    code-fold: true
    code-tools: true
    html-math-method: katex
    self-contained: true
---

# Preliminaries

```{r}
rm(list=ls())
# Packages
pacman::p_load(ggplot2, parallel, future.apply, stringr, kableExtra,
               openxlsx, dplyr, tidyverse, tableone, concreg, Matrix,
               glmnet, MASS, ranger, simdata, reshape2)
set.seed(666)

# R files
source(here::here("src", "setup.R"))
source(here::here("src","functions_aux.R"))
source(here::here("src","functions_sim.R"))

# Parameter
ngroups = 4
xmean = 0
xstd = 0.5

# Load & save setup
setup <- readRDS(here::here("src", "scenario_setup.rds"))
scenarios <- setup[[1]]
sim_design <- setup[[2]]

scn_nr = 10
scn <- scenarios[scn_nr,]
dsgn <- sim_design[[scenarios[scn_nr,]$dsgn]]
```

# Hub correlation structure

```{r}
#' Simulating the Hub Matrix (entries filled in using Toeplitz structure)
#' Implementation by Hardin et al. (DOI: 10.1214/13-AOAS638)
#' k is the number of groups
#' size is a vector of length k specifying the size of each group 
#' rho is a vector of length k specifying base correlation values
#' epsilon <- (1-min(rho) - 0.75*min(tau) ) - .01
#' tau_k = (max(rho_k) - min(rho_k) )/ (size_k -2) 
#' eidim is the space from which the noise is generated, the smaller the more noise
#' power = 2 makes the correlations stay high
#' power = 0.5 makes the correlations descent rapidly
rhomat <- rbind(c(.8,.2), c(.8,.2), c(.8,.2), c(.2,.0))  # correlation ranges in each group
hub_cormat <- simcor.H(k = ngroups, size = rep(scn$p/ngroups,ngroups),rho = rhomat, power = 1, epsilon = 0.075, eidim = 2)
if(!matrixcalc::is.positive.definite(hub_cormat)) hub_cormat <- nearPD(hub_cormat, base.matrix = TRUE, keepDiag = TRUE)$mat
melted_cormat <- melt(hub_cormat)

pc1 <- ggplot(data = melted_cormat, aes(x=Var1, y=Var2, fill=value)) + 
  geom_tile() +
  scale_fill_gradient2(low = "blue", high = "red", mid = "white", 
                       midpoint = 0, limit = c(-1,1), space = "Lab", 
                       name="") +
  scale_x_continuous("Candidate variables", expand=c(0,0)) +
  scale_y_continuous("Candidate variables", expand=c(0,0)) +
  theme_bw() 
pc1
```

# Simdata approach

```{r}
# Data generation
data_sim <- data_generation(dsgn=dsgn, scenario = scn$scenario, n=scn$n, p=scn$p, beta_max = scn$beta_max, a = scn$a, epsstd = scn$epsstd,
                                prop.nonzero = scn$prop.nonzero, sampthresh = scn$sampthresh)
```

```{r}
#| fig.width: 8
#| fig.height: 4
hist(data_sim$data_ana$y, main="Distribution of the outcome variable y", xlab = "Value")
```

```{r}
data_sim$data_ana$x %>%
  data.frame() %>%
  mutate(ID=1:nrow(.)) %>%
  pivot_longer(cols=!ID, values_to="Values", names_to="Variable") %>%
  mutate_at(vars(Values), as.numeric) %>%
  ggplot(aes(x=Values, group=ID, col=ID)) +
  geom_density() +
  scale_x_continuous("Value") +
  scale_y_continuous("Density") +
  theme_bw() +
  theme(text=element_text(size=14), legend.position = "None")
```

```{r}
plot(1:ncol(data_sim$data_ana$x), sort(apply(data_sim$data_ana$x,2, function(x) sum(x==0)/length(x)), decreasing = FALSE), 
     xlab = "Index of variables", ylab = "Proportion of zero-inflation")
```
